Here are the detailed instructions to fix the JavaScript issues in your CRM sync application:

1. **Fix Event Listener Timing Issues**
- Move all event listener attachments inside the DOMContentLoaded event
- Add null checks before attaching listeners
```javascript
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchProjNr');
    if (searchInput) {
        searchInput.addEventListener('input', updateTable);
    }
    // Repeat for other elements
});
```

2. **Fix Variable Redeclaration**
- Remove variable declarations from the global scope
- Create a state object to manage shared data
```javascript
const state = {
    currentData: [],
    freshSyncs: new Set(),
    lastReportTime: 0,
    REPORT_COOLDOWN: 300000
};
```

3. **Add Element Existence Checks**
Before any DOM operations, add safety checks:
```javascript
function updateTable() {
    const tableBody = document.getElementById('dataTableBody');
    if (!tableBody) return;
    
    // Rest of update logic
}
```

4. **Fix Theme Toggle**
Move the theme toggle initialization inside DOMContentLoaded:
```javascript
function initializeTheme() {
    const themeToggle = document.getElementById('themeToggle');
    if (!themeToggle) return;
    
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        document.documentElement.setAttribute('data-bs-theme', savedTheme);
        themeToggle.checked = savedTheme === 'light';
    }
}
```

5. **Improve Error Handling**
Add try-catch blocks around critical operations:
```javascript
async function loadData() {
    try {
        const response = await fetch('/combinedData');
        const data = await response.json();
        // Handle data
    } catch (error) {
        console.error('Error loading data:', error);
        // Show user-friendly error message
    }
}
```

6. **Fix Sort Handlers**
Ensure sort handlers are properly scoped:
```javascript
function initializeSortHandlers() {
    document.querySelectorAll('th[data-sort]').forEach(header => {
        header.addEventListener('click', function() {
            const column = this.dataset.sort;
            if (!column) return;
            // Sort logic
        });
    });
}
```

7. **Improve Button State Management**
Create helper functions for button states:
```javascript
function setButtonLoading(button, isLoading) {
    if (!button) return;
    
    const spinner = button.querySelector('.spinner-border');
    const text = button.querySelector('.btn-text');
    
    button.disabled = isLoading;
    if (spinner) {
        spinner.classList.toggle('d-none', !isLoading);
    }
    if (text) {
        text.textContent = isLoading ? 'Loading...' : 'Generate Reports';
    }
}
```

8. **Fix Export Functionality**
Add proper cleanup after export:
```javascript
function handleExport() {
    const button = document.getElementById('exportBtn');
    if (!button) return;
    
    setButtonLoading(button, true);
    
    fetch('/export')
        .then(response => response.blob())
        .then(blob => {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'export.csv';
            a.click();
            URL.revokeObjectURL(url);
        })
        .catch(error => {
            console.error('Export error:', error);
            alert('Export failed. Please try again.');
        })
        .finally(() => {
            setButtonLoading(button, false);
        });
}
```

9. **Fix Report Polling**
Add cleanup for the polling interval:
```javascript
let pollInterval;

function startPolling() {
    if (pollInterval) {
        clearInterval(pollInterval);
    }
    
    pollInterval = setInterval(() => {
        // Polling logic
    }, 5000);
}

function stopPolling() {
    if (pollInterval) {
        clearInterval(pollInterval);
        pollInterval = null;
    }
}
```

10. **Implement These Changes**
- Make these changes in your existing JavaScript code within index.html
- Keep the existing HTML structure
- No need to create new files or change the Flask structure

These changes will:
- Prevent "Cannot read properties of null" errors
- Fix variable redeclaration issues
- Improve error handling
- Make the code more maintainable
- Keep the existing functionality working as expected

Would you like me to explain any of these changes in more detail?